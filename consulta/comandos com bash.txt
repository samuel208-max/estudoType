// ==================================================
// üõ†Ô∏è COMANDOS BASH ESSENCIAIS PARA TYPESCRIPT
// ==================================================

// üéØ COMPILA√á√ÉO E EXECU√á√ÉO
npx tsc arquivo.ts                    // Compila um arquivo espec√≠fico
npx tsc --watch                       // Compila TODOS os .ts automaticamente
node arquivo.js                       // Executa o JavaScript

npx tsc arquivo.ts --target ES2015    // Compila para vers√£o espec√≠fica do JS
npx tsc --noEmit                      // Verifica erros SEM gerar .js



// üìÅ GERENCIAMENTO DE ARQUIVOS
ls                                    // Lista arquivos na pasta
ls *.ts                               // Lista s√≥ arquivos TypeScript
rm arquivo.js                         // Remove arquivo .js (Linux/Mac)
del arquivo.js                        // Remove arquivo .js (Windows)



// üîß INSTALA√á√ÉO DE BIBLIOTECAS
npm install @types/node --save-dev    // Instala tipos para Node.js
npm install react @types/react --save // Instala React com tipos
npm install -g typescript             // Instala TypeScript globalmente



// üìä INFORMA√á√ïES DO PROJETO
npx tsc --version                     // Mostra vers√£o do TypeScript
npm list typescript                   // Mostra vers√£o instalada
npx tsc --showConfig                  // Mostra configura√ß√£o carregada



// üßπ LIMPEZA E MANUTEN√á√ÉO
npx tsc --build --clean               // Limpa sa√≠das de compila√ß√£o
rm -rf node_modules                   // Remove node_modules (Linux/Mac)
rd /s node_modules                    // Remove node_modules (Windows)
npm install                           // Recria node_modules



// üöÄ SCRIPTS PERSONALIZADOS (adicionar no package.json)
// "scripts": {
//   "build": "tsc",
//   "dev": "tsc --watch",
//   "start": "node dist/index.js"
// }
npm run build                         // Executa script "build"
npm run dev                           // Executa script "dev"



// üîç DEPURA√á√ÉO E AN√ÅLISE
npx tsc --extendedDiagnostics         // Mostra diagn√≥sticos detalhados
npx tsc --listFiles                   // Lista todos os arquivos compilados
npx tsc --traceResolution             // Mostra como resolve imports



// ‚öôÔ∏è CONFIGURA√á√ïES √öTEIS NO tsconfig.json
// "target": "ES2020"                 // Vers√£o do JavaScript alvo
// "strict": true                     // Ativa todas verifica√ß√µes rigorosas  
// "outDir": "./dist"                 // Pasta de sa√≠da dos .js
// "rootDir": "./src"                 // Pasta de origem dos .ts



// üéØ COMANDOS PARA PROJETOS COM M√öLTIPLOS ARQUIVOS
npx tsc                               // Compila TODOS os .ts do projeto
npx tsc src/*.ts --outDir dist        // Compila arquivos espec√≠ficos para pasta



// üì¶ TYPES PARA BIBLIOTECAS EXTERNAS
npm install @types/lodash --save-dev  // Instala tipos para lodash
npm install @types/express --save-dev // Instala tipos para Express



// üîÑ ATUALIZA√á√ïES
npm update typescript                 // Atualiza TypeScript
npm outdated                          // Mostra pacotes desatualizados



// üóëÔ∏è DESINSTALA√á√ÉO
npm uninstall typescript --save-dev   // Remove TypeScript
npm cache clean --force               // Limpa cache do npm



// ==================================================
// üí° COMBINA√á√ïES √öTEIS
// ==================================================

// Compilar e executar em um comando:
npx tsc arquivo.ts && node arquivo.js

// Verificar erros sem compilar:
npx tsc --noEmit --project .

// Compilar para produ√ß√£o (com otimiza√ß√µes):
npx tsc --target ES2020 --module commonjs --outDir dist --strict



// ==================================================
// üöÄ FLUXO DE TRABALHO PROFISSIONAL
// ==================================================

// 1. npx tsc --watch                 (Terminal 1 - Desenvolvimento)
// 2. npm run start                   (Terminal 2 - Execu√ß√£o)
// 3. npm run build                   (Terminal √önico - Produ√ß√£o)



// ==================================================
// üéØ DICA FINAL: CRIE SCRIPTS NO package.json
// ==================================================

// Adicione isso no seu package.json:
/*
"scripts": {
  "dev": "tsc --watch",
  "build": "tsc",
  "start": "node dist/main.js",
  "clean": "rm -rf dist"
}
*/

// Agora use: npm run dev, npm run build, etc!